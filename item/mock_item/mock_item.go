// Code generated by MockGen. DO NOT EDIT.
// Source: item.go

// Package mock_item is a generated GoMock package.
package mock_item

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	item "github.com/sahaj279/go-assignment/item"
)

// MockItemHandler is a mock of ItemHandler interface.
type MockItemHandler struct {
	ctrl     *gomock.Controller
	recorder *MockItemHandlerMockRecorder
}

// MockItemHandlerMockRecorder is the mock recorder for MockItemHandler.
type MockItemHandlerMockRecorder struct {
	mock *MockItemHandler
}

// NewMockItemHandler creates a new mock instance.
func NewMockItemHandler(ctrl *gomock.Controller) *MockItemHandler {
	mock := &MockItemHandler{ctrl: ctrl}
	mock.recorder = &MockItemHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemHandler) EXPECT() *MockItemHandlerMockRecorder {
	return m.recorder
}

// CalculateSalesTax mocks base method.
func (m *MockItemHandler) CalculateSalesTax() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateSalesTax")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CalculateSalesTax indicates an expected call of CalculateSalesTax.
func (mr *MockItemHandlerMockRecorder) CalculateSalesTax() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateSalesTax", reflect.TypeOf((*MockItemHandler)(nil).CalculateSalesTax))
}

// CreateItem mocks base method.
func (m *MockItemHandler) CreateItem(arg0, arg1 string, arg2 float64, arg3 int) (item.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(item.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockItemHandlerMockRecorder) CreateItem(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockItemHandler)(nil).CreateItem), arg0, arg1, arg2, arg3)
}
