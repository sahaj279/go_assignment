// Code generated by "enumer -type=ItemType"; DO NOT EDIT.

package enum

import (
	"fmt"
	"strings"
)

const _ItemTypeName = "RawManufacturedImported"

var _ItemTypeIndex = [...]uint8{0, 3, 15, 23}

const _ItemTypeLowerName = "rawmanufacturedimported"

func (i ItemType) String() string {
	if i < 0 || i >= ItemType(len(_ItemTypeIndex)-1) {
		return fmt.Sprintf("ItemType(%d)", i)
	}
	return _ItemTypeName[_ItemTypeIndex[i]:_ItemTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ItemTypeNoOp() {
	var x [1]struct{}
	_ = x[Raw-(0)]
	_ = x[Manufactured-(1)]
	_ = x[Imported-(2)]
}

var _ItemTypeValues = []ItemType{Raw, Manufactured, Imported}

var _ItemTypeNameToValueMap = map[string]ItemType{
	_ItemTypeName[0:3]:        Raw,
	_ItemTypeLowerName[0:3]:   Raw,
	_ItemTypeName[3:15]:       Manufactured,
	_ItemTypeLowerName[3:15]:  Manufactured,
	_ItemTypeName[15:23]:      Imported,
	_ItemTypeLowerName[15:23]: Imported,
}

var _ItemTypeNames = []string{
	_ItemTypeName[0:3],
	_ItemTypeName[3:15],
	_ItemTypeName[15:23],
}

// ItemTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ItemTypeString(s string) (ItemType, error) {
	if val, ok := _ItemTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ItemTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ItemType values", s)
}

// ItemTypeValues returns all values of the enum
func ItemTypeValues() []ItemType {
	return _ItemTypeValues
}

// ItemTypeStrings returns a slice of all String values of the enum
func ItemTypeStrings() []string {
	strs := make([]string, len(_ItemTypeNames))
	copy(strs, _ItemTypeNames)
	return strs
}

// IsAItemType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ItemType) IsAItemType() bool {
	for _, v := range _ItemTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
