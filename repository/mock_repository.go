// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	enum "github.com/sahaj279/go_assignment/repository/data_field"
	user "github.com/sahaj279/go_assignment/user"
)

// MockSvc is a mock of Svc interface.
type MockSvc struct {
	ctrl     *gomock.Controller
	recorder *MockSvcMockRecorder
}

// MockSvcMockRecorder is the mock recorder for MockSvc.
type MockSvcMockRecorder struct {
	mock *MockSvc
}

// NewMockSvc creates a new mock instance.
func NewMockSvc(ctrl *gomock.Controller) *MockSvc {
	mock := &MockSvc{ctrl: ctrl}
	mock.recorder = &MockSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSvc) EXPECT() *MockSvcMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSvc) Add(arg0 user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockSvcMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSvc)(nil).Add), arg0)
}

// Close mocks base method.
func (m *MockSvc) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSvcMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSvc)(nil).Close))
}

// Delete mocks base method.
func (m *MockSvc) Delete(rollNo int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", rollNo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSvcMockRecorder) Delete(rollNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSvc)(nil).Delete), rollNo)
}

// List mocks base method.
func (m *MockSvc) List(field enum.DataField, ASCOrder bool) []user.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", field, ASCOrder)
	ret0, _ := ret[0].([]user.User)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockSvcMockRecorder) List(field, ASCOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSvc)(nil).List), field, ASCOrder)
}

// Load mocks base method.
func (m *MockSvc) Load(dataFilePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", dataFilePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockSvcMockRecorder) Load(dataFilePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockSvc)(nil).Load), dataFilePath)
}

// Save mocks base method.
func (m *MockSvc) Save(users []user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", users)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSvcMockRecorder) Save(users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSvc)(nil).Save), users)
}
