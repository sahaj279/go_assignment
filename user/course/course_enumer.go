// Code generated by "enumer -type=Course -json"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CourseName = "ABCDEF"

var _CourseIndex = [...]uint8{0, 1, 2, 3, 4, 5, 6}

const _CourseLowerName = "abcdef"

func (i Course) String() string {
	if i < 0 || i >= Course(len(_CourseIndex)-1) {
		return fmt.Sprintf("Course(%d)", i)
	}
	return _CourseName[_CourseIndex[i]:_CourseIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CourseNoOp() {
	var x [1]struct{}
	_ = x[A-(0)]
	_ = x[B-(1)]
	_ = x[C-(2)]
	_ = x[D-(3)]
	_ = x[E-(4)]
	_ = x[F-(5)]
}

var _CourseValues = []Course{A, B, C, D, E, F}

var _CourseNameToValueMap = map[string]Course{
	_CourseName[0:1]:      A,
	_CourseLowerName[0:1]: A,
	_CourseName[1:2]:      B,
	_CourseLowerName[1:2]: B,
	_CourseName[2:3]:      C,
	_CourseLowerName[2:3]: C,
	_CourseName[3:4]:      D,
	_CourseLowerName[3:4]: D,
	_CourseName[4:5]:      E,
	_CourseLowerName[4:5]: E,
	_CourseName[5:6]:      F,
	_CourseLowerName[5:6]: F,
}

var _CourseNames = []string{
	_CourseName[0:1],
	_CourseName[1:2],
	_CourseName[2:3],
	_CourseName[3:4],
	_CourseName[4:5],
	_CourseName[5:6],
}

// CourseString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CourseString(s string) (Course, error) {
	if val, ok := _CourseNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CourseNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Course values", s)
}

// CourseValues returns all values of the enum
func CourseValues() []Course {
	return _CourseValues
}

// CourseStrings returns a slice of all String values of the enum
func CourseStrings() []string {
	strs := make([]string, len(_CourseNames))
	copy(strs, _CourseNames)
	return strs
}

// IsACourse returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Course) IsACourse() bool {
	for _, v := range _CourseValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Course
func (i Course) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Course
func (i *Course) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Course should be a string, got %s", data)
	}

	var err error
	*i, err = CourseString(s)
	return err
}
